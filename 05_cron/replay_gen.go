package main

// Code generated by typedreplay. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/corverroos/replay"
	"github.com/luno/reflex"
	// TODO(corver): Support importing other packages.
)

const (
	_ns    = "05_longhello"
	_wCron = "cron"
	_aTask = "task"
)

// RunCron provides a type API for running the cron workflow.
// It returns true on success or false on duplicate calls or an error.
func RunCron(ctx context.Context, cl replay.Client, run string, message *Timestamp) (bool, error) {
	return cl.RunWorkflow(ctx, _ns, _wCron, run, message)
}

// startReplayLoops registers the workflow and activities for typed workflow functions.
func startReplayLoops(getCtx func() context.Context, cl replay.Client, cstore reflex.CursorStore, b Backends,
	cron func(cronFlow, *Timestamp)) {

	cronFunc := func(ctx replay.RunContext, message *Timestamp) {
		cron(cronFlowImpl{ctx}, message)
	}
	replay.RegisterWorkflow(getCtx, cl, cstore, _ns, cronFunc, replay.WithName(_wCron))

	replay.RegisterActivity(getCtx, cl, cstore, b, _ns, ExecTask, replay.WithName(_aTask))
}

// cronFlow defines a typed API for the cron workflow.
type cronFlow interface {

	// Sleep blocks for at least d duration.
	// Note that replay sleeps aren't very accurate and
	// a few seconds is the practical minimum.
	Sleep(d time.Duration)

	// CreateEvent returns the reflex event that started the run iteration (type is internal.CreateRun).
	// The event timestamp could be used to reason about run age.
	CreateEvent() *reflex.Event

	// LastEvent returns the latest reflex event (type is either internal.CreateRun or internal.ActivityResponse).
	// The event timestamp could be used to reason about run liveliness.
	LastEvent() *reflex.Event

	// Now returns the last event timestamp as the deterministic "current" time.
	// It is assumed the first time this is used in logic it will be very close to correct while
	// producing deterministic logic during bootstrapping.
	Now() time.Time

	// Run returns the run name/identifier.
	Run() string

	// Restart completes the current run iteration and starts a new run iteration with the provided input message.
	// The run state is effectively reset. This is handy to mitigate bootstrap load for long running tasks.
	// It also allows updating the activity logic/ordering.
	Restart(message *Timestamp)

	// ExecTask results in the ExecTask activity being called asynchronously
	// with the provided parameter and returns the response once available.
	ExecTask(message *Timestamp) *Empty
}

type cronFlowImpl struct {
	ctx replay.RunContext
}

func (f cronFlowImpl) Sleep(d time.Duration) {
	f.ctx.Sleep(d)
}

func (f cronFlowImpl) CreateEvent() *reflex.Event {
	return f.ctx.CreateEvent()
}

func (f cronFlowImpl) LastEvent() *reflex.Event {
	return f.ctx.LastEvent()
}

func (f cronFlowImpl) Now() time.Time {
	return f.ctx.LastEvent().Timestamp
}

func (f cronFlowImpl) Run() string {
	return f.ctx.Run()
}

func (f cronFlowImpl) Restart(message *Timestamp) {
	f.ctx.Restart(message)
}

func (f cronFlowImpl) ExecTask(message *Timestamp) *Empty {
	return f.ctx.ExecActivity(ExecTask, message, replay.WithName(_aTask)).(*Empty)
}

// StreamCron returns a stream of replay events for the cron workflow and an optional run.
func StreamCron(cl replay.Client, run string) reflex.StreamFunc {
	return cl.Stream(_ns, _wCron, run)
}
