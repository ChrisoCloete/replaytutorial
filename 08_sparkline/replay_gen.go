package main

// Code generated by typedreplay. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/corverroos/replay"
	"github.com/golang/protobuf/proto"
	"github.com/luno/reflex"
	// TODO(corver): Support importing other packages.
)

const (
	_ns      = "08_sparkline"
	_wBuffer = "buffer"
	_aFetch  = "fetch"
)

// RunBuffer provides a type API for running the buffer workflow.
// It returns true on success or false on duplicate calls or an error.
func RunBuffer(ctx context.Context, cl replay.Client, run string, message *Data) (bool, error) {
	return cl.RunWorkflow(ctx, _ns, _wBuffer, run, message)
}

// startReplayLoops registers the workflow and activities for typed workflow functions.
func startReplayLoops(getCtx func() context.Context, cl replay.Client, cstore reflex.CursorStore, b Backends,
	buffer func(bufferFlow, *Data)) {

	bufferFunc := func(ctx replay.RunContext, message *Data) {
		buffer(bufferFlowImpl{ctx}, message)
	}
	replay.RegisterWorkflow(getCtx, cl, cstore, _ns, bufferFunc, replay.WithName(_wBuffer))

	replay.RegisterActivity(getCtx, cl, cstore, b, _ns, Fetch, replay.WithName(_aFetch))
}

// bufferFlow defines a typed API for the buffer workflow.
type bufferFlow interface {

	// Sleep blocks for at least d duration.
	// Note that replay sleeps aren't very accurate and
	// a few seconds is the practical minimum.
	Sleep(d time.Duration)

	// CreateEvent returns the reflex event that started the run iteration (type is internal.CreateRun).
	// The event timestamp could be used to reason about run age.
	CreateEvent() *reflex.Event

	// LastEvent returns the latest reflex event (type is either internal.CreateRun or internal.ActivityResponse).
	// The event timestamp could be used to reason about run liveliness.
	LastEvent() *reflex.Event

	// Now returns the last event timestamp as the deterministic "current" time.
	// It is assumed the first time this is used in logic it will be very close to correct while
	// producing deterministic logic during bootstrapping.
	Now() time.Time

	// Run returns the run name/identifier.
	Run() string

	// Restart completes the current run iteration and starts a new run iteration with the provided input message.
	// The run state is effectively reset. This is handy to mitigate bootstrap load for long running tasks.
	// It also allows updating the activity logic/ordering.
	Restart(message *Data)

	// Fetch results in the Fetch activity being called asynchronously
	// with the provided parameter and returns the response once available.
	Fetch(message *Market) *Double
}

type bufferFlowImpl struct {
	ctx replay.RunContext
}

func (f bufferFlowImpl) Sleep(d time.Duration) {
	f.ctx.Sleep(d)
}

func (f bufferFlowImpl) CreateEvent() *reflex.Event {
	return f.ctx.CreateEvent()
}

func (f bufferFlowImpl) LastEvent() *reflex.Event {
	return f.ctx.LastEvent()
}

func (f bufferFlowImpl) Now() time.Time {
	return f.ctx.LastEvent().Timestamp
}

func (f bufferFlowImpl) Run() string {
	return f.ctx.Run()
}

func (f bufferFlowImpl) Restart(message *Data) {
	f.ctx.Restart(message)
}

func (f bufferFlowImpl) Fetch(message *Market) *Double {
	return f.ctx.ExecActivity(Fetch, message, replay.WithName(_aFetch)).(*Double)
}

// StreamBuffer returns a stream of replay events for the buffer workflow and an optional run.
func StreamBuffer(cl replay.Client, run string) reflex.StreamFunc {
	return cl.Stream(_ns, _wBuffer, run)
}

// HandleBufferRun calls fn if the event is a buffer RunCreated event.
// Use StreamBuffer to provide the events.
func HandleBufferRun(e *reflex.Event, fn func(run string, message *Data) error) error {
	return replay.Handle(e,
		replay.HandleSkip(func(namespace, workflow, run string) bool {
			return namespace != _ns || workflow != _wBuffer
		}),
		replay.HandleRunCreated(func(namespace, workflow, run string, message proto.Message) error {
			return fn(run, message.(*Data))
		}),
	)
}
