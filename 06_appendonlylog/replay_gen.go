package main

// Code generated by typedreplay. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/corverroos/replay"
	"github.com/luno/reflex"
	// TODO(corver): Support importing other packages.
)

const (
	_ns      = "06_appendonlylog"
	_wAppend = "append"
)

// RunAppend provides a type API for running the append workflow.
// It returns true on success or false on duplicate calls or an error.
func RunAppend(ctx context.Context, cl replay.Client, run string, message *Data) (bool, error) {
	return cl.RunWorkflow(ctx, _ns, _wAppend, run, message)
}

// startReplayLoops registers the workflow and activities for typed workflow functions.
func startReplayLoops(getCtx func() context.Context, cl replay.Client, cstore reflex.CursorStore, b Backends,
	append func(appendFlow, *Data)) {

	appendFunc := func(ctx replay.RunContext, message *Data) {
		append(appendFlowImpl{ctx}, message)
	}
	replay.RegisterWorkflow(getCtx, cl, cstore, _ns, appendFunc, replay.WithName(_wAppend))

}

// appendFlow defines a typed API for the append workflow.
type appendFlow interface {

	// Sleep blocks for at least d duration.
	// Note that replay sleeps aren't very accurate and
	// a few seconds is the practical minimum.
	Sleep(d time.Duration)

	// CreateEvent returns the reflex event that started the run iteration (type is internal.CreateRun).
	// The event timestamp could be used to reason about run age.
	CreateEvent() *reflex.Event

	// LastEvent returns the latest reflex event (type is either internal.CreateRun or internal.ActivityResponse).
	// The event timestamp could be used to reason about run liveliness.
	LastEvent() *reflex.Event

	// Now returns the last event timestamp as the deterministic "current" time.
	// It is assumed the first time this is used in logic it will be very close to correct while
	// producing deterministic logic during bootstrapping.
	Now() time.Time

	// Run returns the run name/identifier.
	Run() string

	// Restart completes the current run iteration and starts a new run iteration with the provided input message.
	// The run state is effectively reset. This is handy to mitigate bootstrap load for long running tasks.
	// It also allows updating the activity logic/ordering.
	Restart(message *Data)
}

type appendFlowImpl struct {
	ctx replay.RunContext
}

func (f appendFlowImpl) Sleep(d time.Duration) {
	f.ctx.Sleep(d)
}

func (f appendFlowImpl) CreateEvent() *reflex.Event {
	return f.ctx.CreateEvent()
}

func (f appendFlowImpl) LastEvent() *reflex.Event {
	return f.ctx.LastEvent()
}

func (f appendFlowImpl) Now() time.Time {
	return f.ctx.LastEvent().Timestamp
}

func (f appendFlowImpl) Run() string {
	return f.ctx.Run()
}

func (f appendFlowImpl) Restart(message *Data) {
	f.ctx.Restart(message)
}

// StreamAppend returns a stream of replay events for the append workflow and an optional run.
func StreamAppend(cl replay.Client, run string) reflex.StreamFunc {
	return cl.Stream(_ns, _wAppend, run)
}
