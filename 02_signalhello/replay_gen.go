package main

// Code generated by typedreplay. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/corverroos/replay"
	"github.com/golang/protobuf/proto"
	"github.com/luno/reflex"
	// TODO(corver): Support importing other packages.
)

const (
	_ns     = "02_signalhello"
	_wHello = "hello"
)

type helloSignal int

const (
	_sHelloName helloSignal = 1
)

var helloSignalMessages = map[helloSignal]proto.Message{
	_sHelloName: new(String),
}

func (s helloSignal) SignalType() int {
	return int(s)
}

func (s helloSignal) MessageType() proto.Message {
	return helloSignalMessages[s]
}

// SignalHelloName provides a typed API for signalling a hello workflow run with signal name.
// It returns true on success or false on duplicate calls or an error.
func SignalHelloName(ctx context.Context, cl replay.Client, run string, message *String, extID string) (bool, error) {
	return cl.SignalRun(ctx, _ns, _wHello, run, _sHelloName, message, extID)
}

// RunHello provides a type API for running the hello workflow.
// It returns true on success or false on duplicate calls or an error.
func RunHello(ctx context.Context, cl replay.Client, run string, message *Empty) (bool, error) {
	return cl.RunWorkflow(ctx, _ns, _wHello, run, message)
}

// startReplayLoops registers the workflow and activities for typed workflow functions.
func startReplayLoops(getCtx func() context.Context, cl replay.Client, cstore reflex.CursorStore, b Backends,
	hello func(helloFlow, *Empty)) {

	helloFunc := func(ctx replay.RunContext, message *Empty) {
		hello(helloFlowImpl{ctx}, message)
	}
	replay.RegisterWorkflow(getCtx, cl, cstore, _ns, helloFunc, replay.WithName(_wHello))

}

// helloFlow defines a typed API for the hello workflow.
type helloFlow interface {

	// Sleep blocks for at least d duration.
	// Note that replay sleeps aren't very accurate and
	// a few seconds is the practical minimum.
	Sleep(d time.Duration)

	// CreateEvent returns the reflex event that started the run iteration (type is internal.CreateRun).
	// The event timestamp could be used to reason about run age.
	CreateEvent() *reflex.Event

	// LastEvent returns the latest reflex event (type is either internal.CreateRun or internal.ActivityResponse).
	// The event timestamp could be used to reason about run age.
	LastEvent() *reflex.Event

	// Run returns the run name/identifier.
	Run() string

	// Restart completes the current run iteration and starts a new run iteration with the provided input message.
	// The run state is effectively reset. This is handy to mitigate bootstrap load for long running tasks.
	// It also allows updating the activity logic/ordering.
	Restart(message *Empty)

	// AwaitName blocks and returns true when a name signal is/was
	// received for this run. If no signal is/was received it returns false after d duration.
	AwaitName(d time.Duration) (*String, bool)
}

type helloFlowImpl struct {
	ctx replay.RunContext
}

func (f helloFlowImpl) Sleep(d time.Duration) {
	f.ctx.Sleep(d)
}

func (f helloFlowImpl) CreateEvent() *reflex.Event {
	return f.ctx.CreateEvent()
}

func (f helloFlowImpl) LastEvent() *reflex.Event {
	return f.ctx.LastEvent()
}

func (f helloFlowImpl) Run() string {
	return f.ctx.Run()
}

func (f helloFlowImpl) Restart(message *Empty) {
	f.ctx.Restart(message)
}

func (f helloFlowImpl) AwaitName(d time.Duration) (*String, bool) {
	res, ok := f.ctx.AwaitSignal(_sHelloName, d)
	if !ok {
		return nil, false
	}
	return res.(*String), true
}

// StreamHello returns a stream of replay events for the hello workflow and an optional run.
func StreamHello(cl replay.Client, run string) reflex.StreamFunc {
	return cl.Stream(_ns, _wHello, run)
}
